---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:

    - name: Update apt
      ansible.builtin.apt:
        update_cache: true
    
    - name: Do an apt full-upgrade
      ansible.builtin.apt:
        upgrade: full

    - name: Install initial apt dependencies
      ansible.builtin.apt:
        name: "{{ init_apt_packages }}"
        state: present
    
    - name: Install pip initial dependencies
      ansible.builtin.pip:
        name: "{{ init_pip_packages }}"
        state: present
    
    - name: Get hashicorp repo gpg key
      ansible.builtin.apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    - name: Install hashicorp repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com focal main
        state: present
        update_cache: yes  

    - name: Uninstall previous docker versions
      ansible.builtin.apt:
        name: "{{ rm_apt_packages }}"
        state: absent
    
    - name: Get docker repo gpg key
      ansible.builtin.shell:
        cmd: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Install docker repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes
    
    - name: Docker postinstall (group)
      ansible.builtin.group:
        name: docker
        state: present
    
    - name: Docker postinstall (user)
      ansible.builtin.user:
        name: "{{ local_user }}"
        groups: docker

    - name: Install awscli v2
      ansible.builtin.shell:
        cmd: sudo rm -f awscliv2.zip && sudo rm -rf aws && sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && sudo unzip awscliv2.zip && sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

    - name: Install eksctl
      ansible.builtin.shell:
        cmd: curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin

    - name: Install gcp sdk
      ansible.builtin.shell:
        cmd: echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

    - name: Get microsoft repo gpg key
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add azurecli repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ focal main
        state: present
        update_cache: yes

    - name: Get kubernetes repo gpg key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add kubernetes repository
      ansible.builtin.apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        update_cache: yes

    - name: Get helm repo gpg key
      ansible.builtin.apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present
    
    - name: Add helm repository
      ansible.builtin.apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present
        update_cache: yes

    - name: install post packages
      ansible.builtin.apt:
        name: "{{ post_apt_packages }}"
        state: present
    
    - name: Install snap packages
      community.general.snap:
        name: "{{ snap_packages }}"
        state: present
        classic: true
        channel: stable

    - name: microk8s postinstall (group)
      ansible.builtin.group:
        name: microk8s
        state: present
    
    - name: microk8s postinstall (user)
      ansible.builtin.user:
        name: "{{ local_user }}"
        groups: microk8s

    - name: reboot instance
      ansible.builtin.reboot:
        